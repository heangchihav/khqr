type Currency = "USD" | "KHR";
type Expect<T extends true> = T;
type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? true : false;

type AdditionalInfo = Record<string, any>;
interface Checkout {
    id: string;
    refId: string;
    /**
     * \@link [`Currency`](/docs/type#currency)
     */
    currency: Currency;
    /**
     * \@link [`Discount`](/docs/type#discount)
     */
    discountType: Discount["type"] | null;
    discount: number | null;
    tax: number | null;
    subTotal: number;
    total: number;
    clientName: string;
    clientPhone: string;
    clientAddress: string | null;
    /**
     * The URL where the user will be redirected after the checkout is completed
     */
    redirectUrl: string;
    /**
     * Additional information that will be stored in the checkout
     * Must be a valid JSON object
     * - `Record<string, any>`
     */
    additionalInfo: AdditionalInfo | null;
    createdAt: Date;
    updatedAt: Date;
}
type CheckoutItem = {
    id: string;
    checkoutId: string;
    /**
     * Can be used to identify the product
     */
    productId: string | null;
    name: string;
    img: string;
    price: number;
    quantity: number;
    /**
     * \@link [`Discount`](/docs/type#discount)
     */
    discountType: Discount["type"] | null;
    discount: number | null;
};
interface CheckoutItemRequest {
    /**
     * Can be used to identify the product
     * @default undefined
     */
    productId?: string;
    name: string;
    img: string;
    price: number;
    quantity: number;
}
interface ClientInfo {
    name: string;
    phone: string;
    address?: string;
}
/**
 * Discount can be in percentage or amount, will be calculated before tax
 * - If the type is `AMOUNT`, the `value` must be the discount amount
 */
interface Discount {
    type: "AMOUNT" | "PERCENTAGE";
    value: number;
}
interface CheckoutRequest {
    /**
     * The currency of the checkout
     *
     * - `KHR` - Cambodian Riel
     * - `USD` - United States Dollar
     *
     * \@link [`Currency`](/docs/type#currency)
     */
    currency: Currency;
    /**
     * Discount can be in percentage or amount, will be calculated before tax
     *
     * - If the type is `AMOUNT`, the `value` must be the discount amount
     * - If the type is `PERCENTAGE`, the `value` must be a percentage 1 - 100
     *
     * \@link [`Discount`](/docs/type#discount`)
     *
     * @default undefined
     */
    discount?: Discount;
    /**
     * - Tax must be a number between (0 - 100)
     * - Will be calculated after discount
     * - If the value is out of range, the checkout will be rejected
     *
     * @default undefined
     */
    tax?: number;
    /**
     * The total amount to assert after calculating the checkout
     *
     * - If provided, it will be compared with the calculated total
     * - If the value is not the same, the checkout will be rejected
     *
     * @default undefined
     */
    total?: number;
    /**
     * @link [`ClientInfo`](/docs/type#clientinfo)
     */
    client: ClientInfo;
    /**
     * Additional information that will be stored in the checkout
     * Must be a valid JSON object
     *
     * - `Record<string, any>`
     *
     * @default undefined
     **/
    additionalInfo?: AdditionalInfo;
    /**
     * The URL where the user will be redirected after the checkout is completed
     */
    redirectUrl: string;
    /**
     * - Minimum of 1 item
     *
     * @link [`CheckoutItemRequest`](/docs/type#checkoutitemrequest`)
     */
    items: CheckoutItemRequest[];
}
type CheckoutCreateBody = {
    tax?: number;
    total: number;
    subTotal: number;
    discount?: number;
    discountType?: Discount["type"];
    currency: Currency;
    clientName: string;
    clientPhone: string;
    clientAddress?: string;
    redirectUrl: string;
    additionalInfo?: AdditionalInfo;
    items: CheckoutItemRequest[];
};

type TransactionStatus = "TIMEOUT" | "PENDING" | "SUCCESS" | "FAILED";
type Transaction = {
    id: string;
    checkoutId: string;
    /**
     * MD5 hash of the transaction
     */
    md5: string;
    /**
     * KHQR code
     */
    qrCode: string;
    amount: number;
    /**
     * \@link [`Currency`](/docs/type#currency)
     */
    currency: Currency;
    /**
     * - `TIMEOUT`: The transaction has expired
     * - `PENDING`: The transaction is still pending
     * - `SUCCESS`: The transaction has been completed
     * - `FAILED`: The transaction has failed
     *
     * \@link [`TransactionStatus`](/docs/type#transactionstatus)
     */
    status: TransactionStatus;
};

interface CreateCheckoutResponse {
    checkout: Checkout;
    items: CheckoutItem[];
    activeTransaction: Transaction;
}
interface FindOneResponse extends Checkout {
    items: CheckoutItem[];
    transactions: Transaction[];
}

type ApiResponse<T> = ApiResponseError | ApiResponseSuccess<T>;
interface ApiResponseSuccess<T> {
    data: T;
    error: null;
    response?: Response;
}
interface ApiResponseError {
    error: {
        status: number;
        message: string;
    };
    data: null;
    response?: Response;
}
type Api = ReturnType<typeof createApiCall>;
declare function createApiCall(): <TSuccess>(url: string | URL, requestInit?: RequestInit) => Promise<ApiResponse<TSuccess>>;

interface CheckitoutOptions {
    token: string;
    /**
     * @default "https://api-checkitout.rinyato.com"
     */
    apiUrl?: string;
    /**
     * @default "https://checkitout.rinyato.com"
     */
    webUrl?: string;
}
declare class Checkitout {
    protected api: Api;
    protected apiUrl: string;
    protected webUrl: string;
    protected token: string;
    constructor(opts: {
        apiUrl?: string;
        webUrl?: string;
        token: string;
    });
    getCheckoutUrl(checkoutId: string): string;
    create(request: CheckoutRequest): Promise<ApiResponse<CreateCheckoutResponse>>;
    findOne(checkoutId: string): Promise<ApiResponse<FindOneResponse>>;
    protected _INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_track(checkoutId: string, onPaid: () => void, onWebhookCalled: () => void): Promise<() => void>;
}

export { type AdditionalInfo, type ApiResponse, type ApiResponseError, type ApiResponseSuccess, Checkitout, type CheckitoutOptions, type Checkout, type CheckoutCreateBody, type CheckoutItem, type CheckoutItemRequest, type CheckoutRequest, type ClientInfo, type CreateCheckoutResponse, type Currency, type Discount, type Equal, type Expect, type FindOneResponse, type Transaction, type TransactionStatus };
